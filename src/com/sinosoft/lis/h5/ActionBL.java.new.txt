package com.sinosoft.lis.h5;

import com.sinosoft.lis.db.SDAssActAtnDB;
import com.sinosoft.lis.db.SDAssActivityDB;
import com.sinosoft.lis.db.SDAssDB;
import com.sinosoft.lis.db.SDChannelDB;
import com.sinosoft.lis.db.SDContentDB;
import com.sinosoft.lis.db.SDOrderDB;
import com.sinosoft.lis.db.SDProductDB;
import com.sinosoft.lis.db.SDProductFavoriteDB;
import com.sinosoft.lis.db.SDSellerDB;
import com.sinosoft.lis.db.SDSellerFollowDB;
import com.sinosoft.lis.db.SDSendCodeTraceDB;
import com.sinosoft.lis.db.SDUserDB;
import com.sinosoft.lis.pubfun.MMap;
import com.sinosoft.lis.pubfun.PubFun;
import com.sinosoft.lis.pubfun.PubSubmit;
import com.sinosoft.lis.schema.SDAssActAtnSchema;
import com.sinosoft.lis.schema.SDAssActivitySchema;
import com.sinosoft.lis.schema.SDAssSchema;
import com.sinosoft.lis.schema.SDContentSchema;
import com.sinosoft.lis.schema.SDOrderSchema;
import com.sinosoft.lis.schema.SDProductAssessSchema;
import com.sinosoft.lis.schema.SDProductFavoriteSchema;
import com.sinosoft.lis.schema.SDProductSchema;
import com.sinosoft.lis.schema.SDSellerFollowSchema;
import com.sinosoft.lis.schema.SDSellerMessageSchema;
import com.sinosoft.lis.schema.SDSellerSchema;
import com.sinosoft.lis.schema.SDSendCodeTraceSchema;
import com.sinosoft.lis.schema.SDUserSchema;
import com.sinosoft.lis.vschema.SDAssActAtnSet;
import com.sinosoft.lis.vschema.SDAssActivitySet;
import com.sinosoft.lis.vschema.SDAssSet;
import com.sinosoft.lis.vschema.SDChannelSet;
import com.sinosoft.lis.vschema.SDContentSet;
import com.sinosoft.lis.vschema.SDOrderSet;
import com.sinosoft.lis.vschema.SDProductFavoriteSet;
import com.sinosoft.lis.vschema.SDProductSet;
import com.sinosoft.lis.vschema.SDSellerFollowSet;
import com.sinosoft.lis.vschema.SDSellerSet;
import com.sinosoft.lis.vschema.SDSendCodeTraceSet;
import com.sinosoft.lis.vschema.SDUserSet;
import com.sinosoft.lis.wx.WXBL;
import com.sinosoft.utility.CErrors;
import com.sinosoft.utility.ExeSQL;
import com.sinosoft.utility.SSRS;
import com.sinosoft.utility.VData;
import java.io.PrintStream;
import java.lang.reflect.Method;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;
import javax.servlet.http.HttpSession;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

public class ActionBL
{
  public CErrors mErrors = new CErrors();
  public VData mResult = new VData();
  HttpSession session;
  JSONObject data;
  JSONObject rd = new JSONObject();
  public String mOperate;
  public boolean succ = true;
  public String msg = "";
  public String cd = PubFun.getCurrentDate();
  public String ct = PubFun.getCurrentTime();
  public MMap m = new MMap();
  public PubSubmit ps = new PubSubmit();

  public boolean submitData(VData cInputData, String cOperate)
  {
    this.mOperate = cOperate;
    if (!getInputData(cInputData))
    {
      return false;
    }
    try
    {
      getClass().getMethod(this.mOperate, new Class[0]).invoke(this, new Object[0]);
    }
    catch (Exception e) {
      e.printStackTrace();
      this.succ = false;
      this.msg = "不支持的操作";
    }

    String result = "{succ:" + this.succ + ",msg:'" + this.msg + "',data:" + this.rd.toString() + "}";
    JSONObject rjo = JSONObject.fromObject(result);

    this.mResult.add(rjo.toString());
    return true;
  }

  public long getCT(String s1, String s2) {
    long r = 0L;
    try {
      Date d1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(s1);
      Date d2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(s2);
      r = d1.getTime() - d2.getTime();
    }
    catch (ParseException e) {
      e.printStackTrace();
    }
    return r;
  }

  public void weixin_getcofig()
  {
    String url = this.data.get("url").toString();
    String r = WXBL.getInstance().get_signature(url);
    this.succ = true;
    this.rd = JSONObject.fromObject(r);
  }

  public void seller_setcounter() {
    String SellerID = this.data.get("SellerID").toString();
    this.m.put("update sdseller set r8=ifnull(r8,0)*1+1 where sellerid='" + SellerID + "'", "UPDATE");
    this.succ = this.ps.submitData(this.m);
  }

  public void user_userbind()
  {
    String Phone = this.data.get("Phone").toString();
    String Code = this.data.get("VerifyCode").toString();
    SDSendCodeTraceSet s = new SDSendCodeTraceDB().executeQuery("select * from sdsendcodetrace where phone='" + Phone + "' and code='" + Code + "'");
    if (s.size() == 0)
    {
      this.succ = false;
      this.msg = "验证码错误";
      return;
    }
    long x = getCT(this.cd + " " + this.ct, s.get(1).getSendDate() + " " + s.get(1).getSendTime());
    if (x > 14400000L)
    {
      this.succ = false;
      this.msg = "验证码已经失效";
      return;
    }
    SDUserSchema sdu = new SDUserSchema();
    SDUserSet sduser = new SDUserDB().executeQuery("select * from sduser where phone='" + Phone + "'");
    if (sduser.size() > 0)
    {
      sdu = sduser.get(1);
    }
    else
    {
      sdu.setRegDate(this.cd);
      sdu.setRegTime(this.ct);
      sdu.setLastLoginDate(this.cd);
      sdu.setLastLoginTime(this.ct);
      sdu.setPassModDate(this.cd);
      sdu.setPassModTime(this.ct);
      String uid = PubFun.CreateMaxNo("U", "U", 8);
      System.out.println("____----____" + uid);
      sdu.setUserID(uid);
      sdu.setUserName(Phone);
      sdu.setNickName(Phone);
      sdu.setPhone(Phone);

      String pass = UUID.randomUUID().toString();
      pass = pass.substring(0, 8);

      sdu.setPassword(pass);
      sdu.setLastPass(sdu.getPassword());
      this.m.put(sdu, "INSERT");

      this.succ = this.ps.submitData(this.m);

      String content = "已为您成功注册网站用户，用户名：" + Phone + "，密码为" + pass + "，请您尽快登录网站修改密码。【清华园社区】";
      PubFun.sendMessage(Phone, content);

      SDSendCodeTraceSchema sdsct = new SDSendCodeTraceSchema();
      sdsct.setSerialNo(UUID.randomUUID().toString());
      sdsct.setPhone(Phone);
      sdsct.setCode("");
      sdsct.setSendDate(this.cd);
      sdsct.setSendTime(this.ct);
      sdsct.setR1("H5");
      sdsct.setR2(content);
      this.m = new MMap();
      this.m.put(sdsct, "INSERT");
      this.ps.submitData(this.m);
    }

    this.succ = true;
    this.msg = "绑定成功";
    this.rd.accumulate("userinfo", PubFun.schema2JsonObj(sdu));
  }

  public void seller_getsellerlist() {
    String KeyWords = this.data.get("KeyWords").toString();
    String SortType = this.data.get("SortType").toString();
    String PrdType = this.data.get("PrdType").toString();
    String SQL = "select * from sdseller where 1=1 and (r9<>'Y' or r9 is null) ";
    if (!PubFun.isNull(KeyWords))
    {
      SQL = SQL + " and (sellername like '%" + KeyWords + "%' or OrgName like '%" + KeyWords + "%' or ShotOrgName like '%" + KeyWords + "%' or Address like '%" + KeyWords + "%')";
    }
    if (!PubFun.isNull(PrdType))
    {
      SQL = SQL + " and ServiceType='" + PrdType + "'";
    }
    if ((SortType == null) || ("".equals(SortType)) || ("p".equals(SortType)))
    {
      SQL = SQL + " order by sellerid asc";
    }

    this.succ = true;
    this.msg = "查询成功";
    SDSellerSet sdseller = new SDSellerDB().executeQuery(SQL);
    JSONArray ja = PubFun.set2JsonArr(sdseller);
    for (int i = 0; i < ja.size(); i++)
    {
      double dis = 1.0D;
      try {
        String xy = ja.getJSONObject(i).get("XY").toString();
        String[] xya = xy.split("\\|");
        String uxy = this.data.get("UserPosition").toString();
        String[] uxya = uxy.split("\\|");
        System.out.println("___XY___" + xy + "," + uxy);
        dis = PubFun.getDistatce(Double.parseDouble(xya[0]), Double.parseDouble(uxya[0]), Double.parseDouble(xya[1]), Double.parseDouble(uxya[1]));
      }
      catch (Exception localException)
      {
      }

      DecimalFormat df = new DecimalFormat("#.00");
      ja.getJSONObject(i).accumulate("SellerDistance", df.format(dis) + "公里");
      ja.getJSONObject(i).accumulate("SellerDistanceNum", dis);
    }
    if ("d".equals(SortType))
    {
      ja = sortJSONArray(ja);
      for (int i = 0; i < ja.size(); i++)
      {
        ja = sortJSONArray(ja);
      }
    }

    this.rd.accumulate("sellerlist", ja);
  }
  public JSONArray sortJSONArray(JSONArray jsonArr) {
    JSONObject jObject = null;
    for (int i = 0; i < jsonArr.size(); i++) {
      double l = jsonArr.getJSONObject(i).getDouble("SellerDistanceNum");
      for (int j = i + 1; j < jsonArr.size(); j++) {
        double nl = jsonArr.getJSONObject(j).getDouble("SellerDistanceNum");
        if (l > nl) {
          jObject = jsonArr.getJSONObject(j);
          jsonArr.set(j, jsonArr.getJSONObject(i));
          jsonArr.set(i, jObject);
        }
      }
    }

    for (int i = 0; i < jsonArr.size(); i++);
    return jsonArr;
  }

  public void content_getcampaignlist() {
    String SQL = "select * from sdcontent a,sdchannel b where a.channelcode=b.serialno and b.ChannelName='惠民促销' order by a.serialno desc";
    SDContentSet sdcs = new SDContentDB().executeQuery(SQL);
    this.succ = true;
    this.msg = "查询成功";
    this.rd.accumulate("list", PubFun.set2JsonArr(sdcs));
  }

  public void content_getcampaign()
  {
    String SerialNo = this.data.get("SerialNo").toString();
    SDContentSchema sdc = new SDContentDB().executeQuery("select * from sdcontent where SerialNo='" + SerialNo + "'").get(1);
    this.succ = true;
    this.msg = "查询成功";
    this.rd = PubFun.schema2JsonObj(sdc);
  }

  public void seller_gethotsellerlist() {
    String SQL = "select * from (select a.sellerid,a.shotorgname,a.AuthFlag,a.XY,a.R3,count(*),a.r6,a.r5,a.r7 from sdseller a,sdorder b,sdproduct c where a.sellerid=c.sellerid and b.prdid=c.prdid and b.r2 not like'%取消%' a.r9<>'Y' group by a.sellerid,a.shotorgname,a.AuthFlag,a.xy,a.r3,a.r6,a.r5,a.r7 order by count(*) desc) as tmp limit 10";

    this.succ = true;
    this.msg = "查询成功";
    SSRS sr = new ExeSQL().execSQL(SQL);
    JSONArray ja = new JSONArray();
    for (int i = 0; i < sr.getMaxRow(); i++)
    {
      JSONObject ji = new JSONObject();
      ji.accumulate("SellerID", sr.GetText(i + 1, 1));
      ji.accumulate("ShotOrgName", sr.GetText(i + 1, 2));
      ji.accumulate("AuthFlag", sr.GetText(i + 1, 3));
      ji.accumulate("XY", sr.GetText(i + 1, 4));
      ji.accumulate("R3", sr.GetText(i + 1, 5));
      ji.accumulate("R4", sr.GetText(i + 1, 6));
      ji.accumulate("R6", sr.GetText(i + 1, 7));
      ji.accumulate("R5", sr.GetText(i + 1, 8));
      ji.accumulate("R7", sr.GetText(i + 1, 9));
      ja.add(ji);
    }

    for (int i = 0; i < ja.size(); i++)
    {
      double dis = 1.0D;
      try {
        String xy = ja.getJSONObject(i).get("XY").toString();
        String[] xya = xy.split("\\|");
        String uxy = this.data.get("UserPosition").toString();
        String[] uxya = uxy.split("\\|");
        System.out.println("___XY___" + xy + "," + uxy);
        dis = PubFun.getDistatce(Double.parseDouble(xya[0]), Double.parseDouble(uxya[0]), Double.parseDouble(xya[1]), Double.parseDouble(uxya[1]));
      }
      catch (Exception localException)
      {
      }

      DecimalFormat df = new DecimalFormat("#.00");
      ja.getJSONObject(i).accumulate("SellerDistance", df.format(dis) + "公里");
    }
    this.rd.accumulate("sellerlist", ja);
  }

  public void seller_getseller()
  {
    seller_setcounter();
    String SellerID = this.data.get("SellerID").toString();
    String UserID = this.data.get("UserID").toString();
    SDSellerSet sdss = new SDSellerDB().executeQuery("select * from sdseller where sellerid='" + SellerID + "' and (r9<>'Y' or r9 is null)");
    if (sdss.size() == 0)
    {
      this.succ = false;
      this.msg = "未查询到信息";
    }
    else
    {
      this.succ = true;
      this.msg = "查询成功";
      this.rd = PubFun.schema2JsonObj(sdss.get(1));
      String ConnStatus = "Y";
      if (PubFun.checkZero("select count(*) from sdsellerfollow where sellerid='" + SellerID + "' and userid='" + UserID + "'"))
      {
        ConnStatus = "N";
      }
      this.rd.accumulate("ConnStatus", ConnStatus);
      this.rd.accumulate("PicUrl", "../sellerimg/" + sdss.get(1).getSellerID() + ".jpg");
    }
  }

  public void seller_getchnllist()
  {
    SDChannelSet sdcs = new SDChannelDB().executeQuery("select * from sdchannel where r2='Y' and r3='2' union select * from sdchannel a where exists (select 1 from sdchannel b where a.SerialNo=b.parentchannel and b.r3='2' and a.r2='Y')");

    this.succ = true;
    this.msg = "查询成功";
    this.rd.accumulate("channellist", PubFun.set2JsonArr(sdcs));
  }

  public void seller_follow()
  {
    String SellerID = this.data.get("SellerID").toString();
    String UserID = this.data.get("UserID").toString();
    String Act = this.data.get("Act").toString();
    if ("add".equals(Act))
    {
      SDSellerFollowSet sdsfs = new SDSellerFollowDB().executeQuery("select * from sdsellerfollow where sellerid='" + SellerID + "' and userid='" + UserID + "'");
      if (sdsfs.size() > 0)
      {
        this.succ = true;
        this.msg = "关注成功";
      }
      else
      {
        SDSellerFollowSchema sdsf = new SDSellerFollowSchema();
        sdsf.setUserID(UserID);
        sdsf.setSellerID(SellerID);
        sdsf.setFollowDate(this.cd);
        sdsf.setFollowTime(this.ct);
        sdsf.setSerialNo(PubFun.CreateMaxNo("SF", "SF", 20));
        this.m.put(sdsf, "INSERT");
        this.succ = this.ps.submitData(this.m);
        this.msg = "关注成功";
      }
    }
    else if ("cancel".equals(Act))
    {
      this.m.put("delete from sdsellerfollow where sellerid='" + SellerID + "' and userid='" + UserID + "'", "DELETE");
      this.succ = this.ps.submitData(this.m);
      this.msg = "取消关注成功";
    }
    else
    {
      this.succ = false;
      this.msg = "Act参数传递错误";
    }
  }

  public void product_getprd()
  {
    String PrdID = this.data.get("PrdID").toString();
    String UserID = this.data.get("UserID").toString();
    SDProductSet sdps = new SDProductDB().executeQuery("select * from sdproduct where prdid='" + PrdID + "' and r1='Y'");
    if (sdps.size() == 0)
    {
      this.succ = false;
      this.msg = "未查询到信息";
    }
    else
    {
      this.succ = true;
      this.msg = "查询成功";
      sdps.get(1).setR4(new ExeSQL().getOneValue("select count(*) from sdorder where prdid='" + PrdID + "'"));
      this.rd = PubFun.schema2JsonObj(sdps.get(1));
      String ConnStatus = "Y";
      if (PubFun.checkZero("select count(*) from SDProductFavorite where prdid='" + PrdID + "' and userid='" + UserID + "'"))
      {
        ConnStatus = "N";
      }
      this.rd.accumulate("ConnStatus", ConnStatus);
    }
  }

  public void product_getprdlist()
  {
    String SellerID = this.data.get("SellerID").toString();
    String KeyWords = this.data.get("KeyWords").toString();
    SDProductSet sdps = new SDProductDB().executeQuery("select * from sdproduct where sellerid='" + SellerID + "' and R1='Y' and prdname like '%" + KeyWords + "%'");
    SDSellerSchema sds = new SDSellerDB().executeQuery("select * from sdseller where sellerid = '" + SellerID + "'").get(1);
    this.succ = true;
    this.msg = "查询成功";
    SSRS r4 = new ExeSQL().execSQL("select count(*),a.prdid from sdorder a,sdproduct b where a.prdid=b.prdid and b.sellerid='" + SellerID + "' group by a.prdid");
    for (int i = 0; i < sdps.size(); i++)
    {
      sdps.get(i + 1).setR4("0");
      for (int j = 0; j < r4.getMaxRow(); j++)
      {
        if (r4.GetText(j + 1, 2).equals(sdps.get(i + 1).getPrdID()))
          sdps.get(i + 1).setR4(r4.GetText(j + 1, 1));
      }
    }
    this.rd.accumulate("productlist", PubFun.set2JsonArr(sdps));
    this.rd.accumulate("ShotOrgName", sds.getShotOrgName());
    this.rd.accumulate("AuthFlag", sds.getAuthFlag());
  }

  public void product_favorite() {
    String PrdID = this.data.get("PrdID").toString();
    String UserID = this.data.get("UserID").toString();
    SDProductFavoriteSet sdpfs = new SDProductFavoriteDB().executeQuery("select * from sdproductfavorite where userid='" + UserID + "' and prdid='" + PrdID + "'");
    if (sdpfs.size() > 0)
    {
      this.m.put(sdpfs, "DELETE");
      this.succ = this.ps.submitData(this.m);
      this.msg = "取消收藏成功";
    }
    else
    {
      SDProductFavoriteSchema sdpf = new SDProductFavoriteSchema();
      sdpf.setUserID(UserID);
      sdpf.setPrdID(PrdID);
      sdpf.setFavDate(this.cd);
      sdpf.setFavTime(this.ct);
      sdpf.setSerialNo(PubFun.CreateMaxNo("SF", "SF", 20));
      this.m.put(sdpf, "INSERT");
      this.succ = this.ps.submitData(this.m);
      this.msg = "收藏成功";
    }
  }

  public void product_assess()
  {
    SDProductAssessSchema sdpa = new SDProductAssessSchema();

    String[] pa = { "OrderID", "UserID", "Title", "Level", "Community", "Content", "Phone" };
    for (int i = 0; i < pa.length; i++)
    {
      sdpa.setV(pa[i], this.data.get(pa[i]).toString());
    }
    sdpa.setAssEssDate(this.cd);
    sdpa.setAssEssTime(this.ct);
    sdpa.setSerialNo(PubFun.CreateMaxNo("SA", "SA", 20));
    this.m.put(sdpa, "INSERT");
    this.m.put("update sdorder set r2='已完成(已评价)' where orderid='" + this.data.get("OrderID") + "'", "UPDATE");

    this.succ = this.ps.submitData(this.m);
    if (this.succ)
    {
      this.msg = "评价成功";
    }
    else
    {
      this.msg = "评价失败";
    }
  }

  public void seller_message()
  {
    SDSellerMessageSchema sdsm = new SDSellerMessageSchema();

    String[] pa = { "SellerID", "UserID", "Level", "Context", "Phone", "OrderID" };
    for (int i = 0; i < pa.length; i++)
    {
      sdsm.setV(pa[i], this.data.get(pa[i]).toString());
    }
    sdsm.setMsgDate(this.cd);
    sdsm.setMsgTime(this.ct);
    sdsm.setSerialNo(PubFun.CreateMaxNo("SM", "SM", 20));
    this.m.put(sdsm, "INSERT");
    this.succ = this.ps.submitData(this.m);
    if (this.succ)
    {
      this.msg = "留言成功";
    }
    else
    {
      this.msg = "留言失败";
    }
  }

  public void activity_getactlist()
  {
    String KeyWrods = this.data.get("KeyWrods").toString();
    String SQL = "select * from SDAssActivity where 1=1 ";
    String SQL2 = "select a.* from sdass a,SDAssActivity b where a.assid=b.assid ";
    if (!PubFun.isNull(KeyWrods))
    {
      SQL = SQL + " and (Title like '%" + KeyWrods + "%' or ActRule like '%" + KeyWrods + "%' or ActContent like '%" + KeyWrods + "%' or ActGift like '%" + KeyWrods + "%')";
      SQL2 = SQL2 + " and (Title like '%" + KeyWrods + "%' or ActRule like '%" + KeyWrods + "%' or ActContent like '%" + KeyWrods + "%' or ActGift like '%" + KeyWrods + "%')";
    }
    SQL = SQL + " and AppStatus='Y'";
    SQL2 = SQL2 + " and AppStatus='Y'";
    SQL = SQL + " order by actid desc";
    SDAssSet sdas = new SDAssDB().executeQuery(SQL2);
    SDAssActivitySet sdaas = new SDAssActivityDB().executeQuery(SQL);
    JSONArray ja = new JSONArray();
    for (int i = 0; i < sdaas.size(); i++)
    {
      JSONObject ji = PubFun.schema2JsonObj(sdaas.get(i + 1));
      for (int j = 0; j < sdas.size(); j++)
      {
        if (!sdaas.get(i + 1).getAssID().equals(sdas.get(j + 1).getAssID()))
          continue;
        ji.accumulate("ShotOrgName", sdas.get(j + 1).getShotOrgName());
        break;
      }

      ja.add(ji);
    }
    this.succ = true;
    this.msg = "查询成功";
    this.rd.accumulate("actlist", ja);
  }

  public void activity_getact()
  {
    String ActID = this.data.get("ActID").toString();
    String UserID = this.data.get("UserID").toString();
    SDAssActivitySet sdaas = new SDAssActivityDB().executeQuery("select * from SDAssActivity where ActID = '" + ActID + "'");
    if (sdaas.size() == 0)
    {
      this.succ = false;
      this.msg = "未查询到活动";
    }
    else
    {
      this.succ = true;
      this.msg = "查询成功";
      this.rd = PubFun.schema2JsonObj(sdaas.get(1));
      String Sataus = "y";
      try {
        String nowDate = PubFun.getCurrentDate();

        if (new SimpleDateFormat("yyyy-MM-dd").parse(nowDate).after(new SimpleDateFormat("yyyy-MM-dd").parse(sdaas.get(1).getRegEndDate())))
        {
          Sataus = "n";
        }
        else
        {
          Sataus = "y";
        }
      } catch (Exception localException) {
      }
      this.rd.accumulate("Sataus", Sataus);
      this.rd.accumulate("PtcNum", new ExeSQL().getOneValue("SELECT COUNT(*) from SDAssActAtn where actid='" + ActID + "'"));
      this.rd.accumulate("ConnPsn", new ExeSQL().getOneValue("select assname from sdass where assid='" + sdaas.get(1).getAssID() + "'"));
      String ConnStatus = "y";
      if (PubFun.checkZero("select count(*) from sdassactatn where actid='" + ActID + "' and userid='" + UserID + "'"))
      {
        ConnStatus = "n";
      }
      this.rd.accumulate("ConnStatus", ConnStatus);
    }
  }

  public void order_sendorder()
  {
    SDOrderSchema sdo = new SDOrderSchema();

    String[] pa = { "PrdID", "UserID", "OrderDate", "ArriveDate", "Owner", "OCount", "ComeFlag", "R1", "Address", "Requirement", "Phone", "Tel" };
    for (int i = 0; i < pa.length; i++)
    {
      sdo.setV(pa[i], this.data.get(pa[i]).toString());
    }

    sdo.setMakeDate(this.cd);
    sdo.setMakeTime(this.ct);
    sdo.setModifyDate(this.cd);
    sdo.setModifyTime(this.ct);
    String OrderID = PubFun.CreateMaxNo("O", "O", 10);
    sdo.setOrderID(OrderID);
    sdo.setR2("已提交");
    this.m.put(sdo, "INSERT");
    SDProductSchema sdp = new SDProductDB().executeQuery("select * from sdproduct where prdid='" + this.data.get("PrdID").toString() + "'").get(1);
    this.m.put("update sdseller set r3=(select count(*) from sdorder b,sdproduct c where b.prdid=c.prdid and c.sellerid=sdseller.sellerid) where sellerid='" + sdp.getSellerID() + "'", "UPDATE");
    this.succ = this.ps.submitData(this.m);
    if (this.succ)
    {
      this.msg = "下单成功";
      this.rd.accumulate("OrderID", OrderID);

      SDSellerSchema se = new SDSellerDB().executeQuery("select * from a.* from sdseller a,sdproduct b where a.sellerid=b.sellerid and b.prdid='" + sdo.getPrdID() + "'").get(1);
      String content = "有用户下新订单(" + sdo.getOrderID() + ")，联系电话为(" + sdo.getPhone() + ")，请登录查看。【清华园社区】";
      PubFun.sendMessage(se.getPhone(), content);

      SDSendCodeTraceSchema sdsct = new SDSendCodeTraceSchema();
      sdsct.setSerialNo(UUID.randomUUID().toString());
      sdsct.setPhone(se.getPhone());
      sdsct.setCode("");
      sdsct.setSendDate(this.cd);
      sdsct.setSendTime(this.ct);
      sdsct.setR1("WEB");
      sdsct.setR2(content);
      this.m.put(sdsct, "INSERT");
      this.ps.submitData(this.m);
    }
    else
    {
      this.msg = "下单失败";
    }
  }

  public void activity_register()
  {
    String ActID = this.data.get("ActID").toString();
    String UserID = this.data.get("UserID").toString();
    SDAssActAtnSet sdaaas = new SDAssActAtnDB().executeQuery("select * from SDAssActAtn where actid='" + ActID + "' and userid = '" + UserID + "'");
    if (sdaaas.size() > 0)
    {
      this.m.put(sdaaas, "DELETE");
      this.m.put("update sdassactivity set r2=(select count(*) from SDAssActAtn a where a.actid='" + ActID + "') where actid='" + ActID + "'", "UPDATE");

      this.succ = this.ps.submitData(this.m);
      this.msg = "取消参加成功";
    }
    else
    {
      SDAssActAtnSchema sdaaa = new SDAssActAtnSchema();
      sdaaa.setActID(ActID);
      sdaaa.setUserID(UserID);
      sdaaa.setAtnDate(this.cd);
      sdaaa.setAtnTime(this.ct);
      sdaaa.setSerialNo(PubFun.CreateMaxNo("SR", "SR", 20));
      this.m.put(sdaaa, "INSERT");
      this.m.put("update sdassactivity set r2=(select count(*) from SDAssActAtn a where a.actid='" + ActID + "') where actid='" + ActID + "'", "UPDATE");

      this.succ = this.ps.submitData(this.m);
      this.msg = "参加成功";
    }
  }

  public void user_getcenter()
  {
    String UserID = this.data.get("UserID").toString();
    SDUserSet sdus = new SDUserDB().executeQuery("select * from sduser where userid = '" + UserID + "'");
    if (sdus.size() == 0)
    {
      this.succ = false;
      this.msg = "未查询到用户信息";
    }
    else
    {
      this.succ = true;
      this.msg = "查询成功";
      this.rd = PubFun.schema2JsonObj(sdus.get(1));
      this.rd.accumulate("NowDate", PubFun.getCurrentDate());
      this.rd.accumulate("NowDay", PubFun.getWeekOfDate(new Date()));
      String c1 = new ExeSQL().getOneValue("select count(*) from \tsdorder where userid='" + UserID + "'");
      String c2 = new ExeSQL().getOneValue("select count(*) from \tsdorder where userid='" + UserID + "' and r2 like '已完成%'");
      String c3 = new ExeSQL().getOneValue("select count(*) from \tsdorder where userid='" + UserID + "' and r2 not like '已完成%'");
      String c4 = new ExeSQL().getOneValue("select count(*) from \tsdorder where userid='" + UserID + "' and r2 like '%取消%'");
      String c5 = new ExeSQL().getOneValue("select count(*) from \tSDProductAssess where userid='" + UserID + "'");
      String c6 = new ExeSQL().getOneValue("select count(*) from \tSDAssActAtn where userid='" + UserID + "'");
      this.rd.accumulate("c1", c1);
      this.rd.accumulate("c2", c2);
      this.rd.accumulate("c3", c3);
      this.rd.accumulate("c4", c4);
      this.rd.accumulate("c5", c5);
      this.rd.accumulate("c6", c6);
    }
  }

  public void user_getorderlist()
  {
    String UserID = this.data.get("UserID").toString();
    String OrderID = this.data.get("OrderID").toString();
    String SellerID = this.data.get("SellerID").toString();
    String SQL = "select * from sdorder a where userid='" + UserID + "' ";
    String SQL2 = "select a.prdid,a.prdname from sdproduct a,sdorder b where a.prdid=b.prdid and b.userid='" + UserID + "' ";
    if (!PubFun.isNull(OrderID))
    {
      SQL = SQL + " and orderid='" + OrderID + "'";
      SQL2 = SQL2 + " and orderid='" + OrderID + "'";
    }

    if (!PubFun.isNull(SellerID))
    {
      SQL = SQL + " and exists (select 1 from sdproduct b where a.prdid=b.prdid and b.sellerid='" + SellerID + "')";
      SQL2 = SQL2 + " and a.sellerid='" + SellerID + "'";
    }
    SQL = SQL + " order by orderid desc";

    SSRS sr = new ExeSQL().execSQL(SQL2);

    SDOrderSet sdos = new SDOrderDB().executeQuery(SQL);
    JSONArray ja = PubFun.set2JsonArr(sdos);
    for (int i = 0; i < ja.size(); i++)
    {
      for (int j = 0; j < sr.getMaxRow(); j++)
      {
        if (!ja.getJSONObject(i).get("PrdID").equals(sr.GetText(j + 1, 1)))
          continue;
        ja.getJSONObject(i).accumulate("PrdName", sr.GetText(j + 1, 2));
        break;
      }
    }

    this.succ = true;
    this.msg = "查询成功";
    this.rd.accumulate("orderlist", ja);
  }

  public void user_getactlist()
  {
    String UserID = this.data.get("UserID").toString();
    String ActID = this.data.get("ActID").toString();
    String SQL = "select b.* from sdassactatn a,sdassactivity b where a.actid=b.actid and a.userid='" + UserID + "' ";
    if (!PubFun.isNull(ActID))
    {
      SQL = SQL + " and a.ActID='" + ActID + "'";
    }
    SQL = SQL + " order by a.actid desc";
    SDAssActivitySet sdaas = new SDAssActivityDB().executeQuery(SQL);
    this.succ = true;
    this.msg = "查询成功";
    this.rd.accumulate("actlist", PubFun.set2JsonArr(sdaas));
  }

  public void user_getfavoritelist() {
    String UserID = this.data.get("UserID").toString();
    String PrdID = this.data.get("PrdID").toString();
    String SQL = "select b.* from sdproductfavorite a,sdproduct b where a.prdid=b.prdid and a.userid='" + UserID + "' order by a.serialno desc";
    if (!PubFun.isNull(PrdID))
    {
      SQL = SQL + " and a.prdID='" + PrdID + "'";
    }
    SDProductSet sdps = new SDProductDB().executeQuery(SQL);
    this.succ = true;
    this.msg = "查询成功";
    this.rd.accumulate("favoritelist", PubFun.set2JsonArr(sdps));
  }

  public void user_getfollowlist() {
    String UserID = this.data.get("UserID").toString();
    String SellerID = this.data.get("SellerID").toString();
    String SQL = "select b.* from sdsellerfollow a,sdseller b where a.sellerid=b.sellerid and a.userid='" + UserID + "' order by a.serialno desc";
    if (!PubFun.isNull(SellerID))
    {
      SQL = SQL + " and a.SellerID='" + SellerID + "'";
    }
    SDSellerSet sdss = new SDSellerDB().executeQuery(SQL);
    this.succ = true;
    this.msg = "查询成功";
    JSONArray ja = PubFun.set2JsonArr(sdss);
    for (int i = 0; i < ja.size(); i++)
    {
      double dis = 1.0D;
      try {
        String xy = ja.getJSONObject(i).get("XY").toString();
        String[] xya = xy.split("\\|");
        String uxy = this.data.get("UserPosition").toString();
        String[] uxya = uxy.split("\\|");
        System.out.println("___XY___" + xy + "," + uxy);
        dis = PubFun.getDistatce(Double.parseDouble(xya[0]), Double.parseDouble(uxya[0]), Double.parseDouble(xya[1]), Double.parseDouble(uxya[1]));
      }
      catch (Exception localException)
      {
      }

      DecimalFormat df = new DecimalFormat("#.00");
      ja.getJSONObject(i).accumulate("SellerDistance", df.format(dis) + "公里");
    }
    this.rd.accumulate("followlist", PubFun.set2JsonArr(sdss));
  }

  public void user_sendcode()
  {
    String Phone = this.data.get("Phone").toString();

    String code = String.valueOf(System.currentTimeMillis());
    code = code.substring(code.length() - 6, code.length());

    String content = "您的认证码是" + code + "。【清华园社区】";
    PubFun.sendMessage(Phone, content);

    SDSendCodeTraceSchema sdsct = new SDSendCodeTraceSchema();
    sdsct.setSerialNo(UUID.randomUUID().toString());
    sdsct.setPhone(Phone);
    sdsct.setCode(code);
    sdsct.setSendDate(this.cd);
    sdsct.setSendTime(this.ct);
    sdsct.setR1("H5");
    sdsct.setR2(content);
    this.m.put(sdsct, "INSERT");
    this.ps.submitData(this.m);
    this.succ = true;
    this.msg = "发送成功";
  }

  public boolean getInputData(VData cInputData)
  {
    String ds = (String)cInputData.getObjectByObjectName("String", 0);
    this.session = ((HttpSession)cInputData.getObjectByObjectName("ORG.APACHE.CATALINA.SESSION.STANDARDSESSIONFACADE", 0));

    this.data = JSONObject.fromObject(ds);
    return true;
  }

  public VData getResult() {
    return this.mResult;
  }

  public static void main(String[] args)
  {
    double dis = PubFun.getDistatce(116.32924199999999D, 40.004306999999997D, 116.346059D, 39.728845999999997D);
    System.out.println(dis);
  }
}